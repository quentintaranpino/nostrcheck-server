<%
  const cfg = locals.domainConfig?.media || {}; 
  const globalCfg = locals.globalConfig?.media || {};
%>
<div id="settingsMedia">
  <h3 class="mt-4">Media</h3>
  <form class="form mx-auto">
    <p>
      In this section, you can configure the media settings of your server.
      It provides you with the flexibility to customize the media settings according to your specific requirements.
    </p>

    <%- include('field', {
      type: "text",
      name: "media.returnURL",
      label: "Return URL",
      description: "Specify the return URL for the media uploads. This URL will be used to return the uploaded media to the client.",
      value: cfg.returnURL,
      globalValue: globalCfg.returnURL,
      placeholder: "default: https://servername/media",
      required: true,
      overridable: true
    }) %>

    <%- include('field', {
      type: "checkbox",
      name: "media.useCDNPrefix",
      label: "CDN prefix",
      description: "If you active this option, the media files will be served from the host url with the `cdn` prefix.",
      value: cfg.useCDNPrefix,
      globalValue: globalCfg.useCDNPrefix,
      overridable: true
    }) %>

    <%- include('field', {
      type: "checkbox",
      name: "media.allowPublicUploads",
      label: "Allow public uploads",
      description: "If disabled, only registered pubkeys can upload files.",
      value: cfg.allowPublicUploads,
      globalValue: globalCfg.allowPublicUploads,
      overridable: true
    }) %>

    <%- include('field', {
      type: "checkbox",
      name: "media.transform.enabled",
      label: "Enable image and video resizing",
      description: "Enable or disable the image and video resizing functionality of the server. If enabled, the server will resize the images and videos to the specified target size.",
      value: cfg.transform?.enabled,
      globalValue: globalCfg.transform?.enabled,
      overridable: true
    }) %>

    <%- include('field', {
      type: "text",
      name: "media.maxMBfilesize",
      label: "Max file size (MB)",
      description: "Specify the maximum file size allowed for uploads in megabytes.",
      value: cfg.maxMBfilesize,
      globalValue: globalCfg.maxMBfilesize,
      placeholder: "Max file size (in MB)",
      required: true,
      overridable: true
    }) %>

    <%- include('field', {
      type: "number",
      name: "media.transform.media.image.width",
      label: "Image width",
      description: "Target width for image resizing.",
      value: cfg.transform?.media?.image?.width,
      globalValue: globalCfg.transform?.media?.image?.width,
      overridable: true
    }) %>

    <%- include('field', {
      type: "number",
      name: "media.transform.media.image.height",
      label: "Image height",
      description: "Target height for image resizing.",
      value: cfg.transform?.media?.image?.height,
      globalValue: globalCfg.transform?.media?.image?.height,
      overridable: true
    }) %>

    <%- include('field', {
      type: "number",
      name: "media.transform.media.video.width",
      label: "Video width",
      description: "Target width for video resizing.",
      value: cfg.transform?.media?.video?.width,
      globalValue: globalCfg.transform?.media?.video?.width,
      overridable: true
    }) %>

    <%- include('field', {
      type: "number",
      name: "media.transform.media.video.height",
      label: "Video height",
      description: "Target height for video resizing.",
      value: cfg.transform?.media?.video?.height,
      globalValue: globalCfg.transform?.media?.video?.height,
      overridable: true
    }) %>

    <%- include('field', {
      type: "file",
      name: "media.file.not.found",
      label: "Not found banner",
      description: "Specify the banner to be used when a media file is not found.",
      previewSrc: `/static/resources/media-file-not-found.webp${selectedDomain ? `?domain=${selectedDomain}` : ""}`,
      previewSize: { width: 220, height: 220 },
      overridable: true
    }) %>

    <%- include('field', {
      type: "checkbox",
      name: "media.mediainspector.enabled",
      label: "Enable AI media inspector",
      description: "Enable or disable the AI media inspector.",
      value: cfg.mediainspector?.enabled,
      globalValue: globalCfg.mediainspector?.enabled,
      overridable: true
    }) %>

    <%- include('field', {
      type: "select",
      name: "media.mediainspector.type",
      label: "Engine type",
      description: "Choose between a local or remote AI media inspector engine.",
      value: cfg.mediainspector?.type,
      globalValue: globalCfg.mediainspector?.type,
      options: [
        { value: "local", label: "local" },
        { value: "remote", label: "remote" }
      ],
      overridable: true
    }) %>

    <%- include('field', {
      type: "text",
      name: "media.mediainspector.local.modelName",
      label: "Local model name",
      description: "Specify the name of the Hugging Face model to use for local inspection.",
      value: cfg.mediainspector?.local?.modelName,
      globalValue: globalCfg.mediainspector?.local?.modelName,
      placeholder: "e.g. openai/clip-vit-base-patch32",
      overridable: true
    }) %>

    <%- include('field', {
      type: "text",
      name: "media.mediainspector.remote.endpoint",
      label: "Media inspector URL",
      description: "Specify the URL of the remote AI media inspector.",
      value: cfg.mediainspector?.remote?.endpoint,
      globalValue: globalCfg.mediainspector?.remote?.endpoint,
      overridable: true
    }) %>

    <%- include('field', {
      type: "text",
      name: "media.mediainspector.remote.apikey",
      label: "Media inspector apikey",
      description: "Specify the apikey to authenticate requests to the remote AI media inspector.",
      value: cfg.mediainspector?.remote?.apikey,
      globalValue: globalCfg.mediainspector?.remote?.apikey,
      overridable: true
    }) %>

    <div class="col-12 col-md-3 mb-5 mt-4 pb-5 pb-lg-0 mb-lg-2">
      <button class="btn btn-lg mb-4 btn-primary w-100" name="Submit" type="button" onclick="saveSettings()">Save</button>
    </div>
  </form>
</div>