<% 
  const cfg = locals.domainConfig?.plugins || {}; 
  const globalCfg = locals.globalConfig?.plugins || {};
%>
<div id="settingsPlugins">
  <h3 class="mt-4">Plugins</h3>
  <form class="form mx-auto">
    <p>
      In this section, you can configure the plugins engine of your server.
      You can see more information about the plugins
      <a target="_blank" href="https://github.com/quentintaranpino/nostrcheck-server/blob/main/PLUGINS.md">here</a>.
    </p>

    <div class="mb-4">
      <label for="plugins.reload" class="mt-3 mb-1 fw-bold">Reload plugins</label>
      <p>Rerun the plugins engine to load new plugins or changes in the existing ones.</p>
      <div class="col-12 col-md-3">
        <button class="btn btn-lg btn-primary w-100" name="plugins.reload" id="plugins.reload" type="button" onclick="reloadPlugins()">
          <i class="fa-solid fa-sync"></i> Reload
        </button>
      </div>
    </div>

    <%- include('field', {
      type: "text",
      name: "plugins.path",
      label: "Plugins folder path",
      description: "Set the path where the plugins are located.",
      value: cfg.path,
      globalValue: globalCfg.path,
      placeholder: "Default: plugins/",
      required: true,
      overridable: false
    }) %>

    <div class="col-12 col-md-3 mb-5 mt-4 pb-5 pb-lg-0 mb-lg-2">
      <button class="btn btn-lg mb-4 btn-primary w-100" name="Submit" type="button" onclick="saveSettings()">Save</button>
    </div>
  </form>
  <div class="alert alert-warning mt-3" role="alert">
    <i class="fa-solid fa-triangle-exclamation"></i>
    Every plugin must have a unique name and module. The order is used to determine the order of execution. and the enabled field is used to enable or disable the plugin.
    The module is used to select which server module will be affected by the plugin.
  </div>
  <%- include('../table', {
    tableName:"Plugins list", 
    tableDesc:"Here you can see the list of plugins that are currently installed in your server. You can change the name, order and enable or disable the plugins editing the plugin files.",
    tableId:"pluginsData", 
    buttons:[
      ['add','hide'],
      ['disable','show'],
      ['enable','show'],
      ['visible','hide'],
      ['invisible','hide'],
      ['admin','hide'],
      ['edit','hide'],
      ['password','hide'],
      ['remove','hide'],
      ['pay','hide'],
      ['balance','hide'],
      ['moderate','hide'],
      ['ban','hide']
    ],
    fields: [
      ['name', '50', '', 'disabled show text-center'],
      ['module', '50', '', 'disabled show text-center'],
      ['order', '50', '', 'disabled show text-center'],
      ['enabled', '50', 'formatCheckbox', 'enabled show text-center'],
    ],
    datakey: 'plugins',
    objectName: 'plugin',
    tenant: selectedDomain,
  }) %>
</div>

<script>

function reloadPlugins() {
  const btn = document.getElementById('plugins.reload');
  btn.disabled = true;
  btn.innerHTML = '<i class="fa-solid fa-sync fa-spin"></i> Reloading...';

  fetch('/api/v2/plugins/reload', { method: 'POST', headers: { 'Content-Type': 'application/json' } })
    .then(response => response.json())
    .then(data => {
      if (data.status === "success") {
        showMessage(`Plugins reloaded successfully`, "alert-primary");
        getPlugins();
      } else {
        showMessage(`Error reloading plugins: ${data.message}`, "alert-warning");
      }
    })
    .catch(error => console.error('Error:', error))
    .finally(() => {
      btn.disabled = false;
      btn.innerHTML = '<i class="fa-solid fa-sync"></i> Reload';
    });
}

function getPlugins() {
  fetch('/api/v2/plugins', {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' }
  })
    .then(response => response.json())
    .then(data => {
      if (data.status === "success") {
        $('#plugins-table').bootstrapTable('load', data.plugins);
      }
    })
    .catch(error => console.error('Error:', error));
}

document.addEventListener('DOMContentLoaded', () => {
  $('#plugins-table').bootstrapTable({
    columns: [
      { field: 'order', title: 'Order', align: 'center' },
      { field: 'enabled', title: 'Enabled', formatter: (v) => v ? 'True' : 'False', align: 'center' },
      { field: 'name', title: 'Name', align: 'center' },
      { field: 'module', title: 'Module', align: 'center' }
    ],
    sortName: 'order',
    sortOrder: 'asc'
  });
  // getPlugins();
});
</script>
